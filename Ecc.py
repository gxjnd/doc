#!/usr/bin/env python
#-*-coding:utf-8*-

import base64
import json
import argparse
import hashlib
import socket 
import os
import os.path



def extended_gcd(aa, bb):
  lastremainder, remainder = abs(aa), abs(bb)
  x, lastx, y, lasty = 0, 1, 1, 0
  while remainder:
    lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)
    #print (lastremainder,quotient, remainder)
    x, lastx = lastx - quotient*x, x
    y, lasty = lasty - quotient*y, y
  return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)

def modinv(a, m):
  g, x, y = extended_gcd(a, m)
  if g != 1:
    raise ValueError
  return x % m

def get_inverse(mu,p):
  for i in range(1,p):
    if(i*mu)%p==1:
      return i
  return -1

def get_gcd(zi,mu):
  if mu:
    return get_gcd(mu,zi%mu)
  else:
    return zi

def get_np(x1,y1,x2,y2,a,p):
#获取n*p，每次+p，直到求解阶数np=-p
  flag=1#定义符号位（+/-）
  #如果p=qk=(3x2+a)/2y1modp
  if x1==x2 and y1==y2:
    zi=3*(x1**2)+a#计算分子【求导】
    mu=2*y1#计算分母
    #print (3)
#若P≠Q，则k=(y2-y1)/(x2-x1)modp
  else:
    zi=y2-y1
    mu=x2-x1
    if zi*mu<0:
      flag=0#符号0为-（负数）
      zi=abs(zi)
      mu=abs(mu)
  #将分子和分母化为最
  gcd_value=get_gcd(zi,mu)#最大公約數
  zi=zi//gcd_value#整除
  mu=mu//gcd_value
  #求分母的逆元逆元：∀a ∈G ，ョb∈G 使得 ab = ba = e
  #P(x,y)的负元是(x,-ymodp)=(x,p-y)，有P+(-P)=O∞
  #print ("&&" + str(mu)  + "," + str(p)  + "&&&"   )    
  inverse_value=modinv(mu,p)
  k=(zi*inverse_value)
  if flag==0:#斜率负数flag==0
    k=-k
  k=k%p
  #计算x3,y3P+Q
 # x3≡k2-x1-x2(modp)
#  y3≡k(x1-x3)-y1(modp)
  x3=(k**2-x1-x2)%p
  y3=(k*(x1-x3)-y1)%p
  return x3,y3

def get_rank(x0,y0,a,b,p):
#获取椭圆曲线的阶
  x1=x0#-p的x坐标
  y1=(-1*y0)%p#-p的y坐标
  tempX=x0
  tempY=y0
  n=1
  while True:
    n+=1
    #求p+q的和，得到n*p，直到求出阶
    p_x,p_y=get_np(tempX,tempY,x0,y0,a,p)
    print("(" + str(p_x) + "," + str(p_y) + ")")
    #print("-----(" + str(x1) + "," + str(y1) +")-----"    )           
    #如果==-p,那么阶数+1，返回
    if p_x==x1 and p_y==y1:
      return n+1
    tempX=p_x
    tempY=p_y

def get_param(x0,a,b,p):
 # 计算p与-p
  y0=-1
  for i in range(p):
  #满足取模约束条件，椭圆曲线Ep(a,b)，p为质数，x,y∈[0,p-1]
    if i**2%p==(x0**3+a*x0+b)%p:
      y0=i
      break
  #如果y0没有，返回false
  if y0==-1:
    return False
  #计算-y（负数取模）
  x1=x0
  y1=(-1*y0)%p
  return x0,y0,x1,y1


def get_ng(G_x,G_y,key,a,p):
#计算nG
  temp_x=G_x
  temp_y=G_y
  while key!=1:
    temp_x,temp_y=get_np(temp_x,temp_y,G_x,G_y,a,p)
    key-=1
  return temp_x,temp_y


def checkcruve(xxv,yyv):
  ppv = 115792089237316195423570985008687907853269984665640564039457584007908834671663
  xmmul= xxv*xxv
  xmmulend = xmmul*xxv
  rightxxv = xmmulend + 7
  ymmul= yyv*yyv
  lv= ymmul%ppv
  rv = rightxxv%ppv
  if (lv== rv):
    print ("right")

def dec_to_bin(x):
  return int(bin(x)[2:])

def pusharry(dec):
  db = dec_to_bin(dec)
  #print(db)
  strdb = str(db)
  ldb = len(strdb)
  #print(ldb)
  j = 0
  pusharray = []
  for i in range(ldb-1,-1,-1):
    if(strdb[j] == '1'):
      #print("^"+str(i)+ "  "+strdb[j])
      pusharray.append(i)
    j +=1
  return pusharray
  
  
  
def specarray(pa):
  #print(pa)
  pushsameadd = []
  lenpa = len(pa)
  if(pa[lenpa-1]==0):
    lenpa = lenpa -1
    pushsameadd.append(1)
  sameadd = 1
  valuepa = pa[0]

  #print("----------------")
  #print(valuepa)
  
  #print("----------------")
  t = 1
  for i in range(1,valuepa+1):
    #print( "&&&" )
    #print(i)
    sameadd =sameadd+sameadd
    #print(sameadd)
    #print("&&&")
    for k in range(lenpa-t,-1,-1):
      #print("#")
      #print(k)
      #print("#")
      #[6, 5, 4, 1, 0]
      #if(i == 1):
        #print(pa[k])
      if(pa[k] == i):
        t = t + 1
        pushsameadd.append(sameadd)
        break;
      #print(k) 
       
   
  return pushsameadd
  
  
  
  

def specarrayelliptail(pa):
  pushsameadd = []
  lenpa = len(pa)
  if(pa[lenpa-1]==0):
    #at the end of pa_list  contain 0
   # print("***")
   # print(lenpa-1)
   # print("***")
    lenpa = lenpa -1
    pushsameadd.append([55066263022277343669578718895168534326250603453777594175500187360389116729240,32670510020758816978083085130507043184471273380659243275938904335757337482424])
  sameadd = 1
  a = 0
  b = 7 
  p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
  sameelliptailx = 55066263022277343669578718895168534326250603453777594175500187360389116729240
  sameelliptaily = 32670510020758816978083085130507043184471273380659243275938904335757337482424

  valuepa = pa[0]
  t = 1
  for i in range(1,valuepa+1):
    
    sameelliptailx,sameelliptaily=get_np(sameelliptailx,sameelliptaily,sameelliptailx,sameelliptaily,a,p)
    
    #sameadd =sameadd+sameadd
    for k in range(lenpa-t,-1,-1):
      if(pa[k] == i):
        t = t + 1
        pushsameadd.append([sameelliptailx,sameelliptaily])
        break;
  return pushsameadd
  

def specarrayelliptailPub(pa,pubX,pubY):
  pushsameadd = []
  lenpa = len(pa)
  if(pa[lenpa-1]==0):
    lenpa = lenpa -1
    pushsameadd.append([pubX,pubY])
  sameadd = 1
  a = 0
  b = 7 
  p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
  sameelliptailx = pubX
  sameelliptaily = pubY

  valuepa = pa[0]
  t = 1
  for i in range(1,valuepa+1):
    
    sameelliptailx,sameelliptaily=get_np(sameelliptailx,sameelliptaily,sameelliptailx,sameelliptaily,a,p)
    
    #sameadd =sameadd+sameadd
    for k in range(lenpa-t,-1,-1):
      if(pa[k] == i):
        t = t + 1
        pushsameadd.append([sameelliptailx,sameelliptaily])
        break;
  return pushsameadd
  
def addtwo(x0,y0,x1,y1):
  a = 0
  b = 7 
  p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
  endx,endy=get_np(x0,y0,x1,y1,a,p)
  return endx,endy
    

def checksame(specvalue):
  #print(specvalue)
  lenspeclen = len(specvalue)
  specsum = 0
  for i in range (0,lenspeclen):
    specsum = specvalue[i] + specsum
  return specsum
  

def checksameelliptail(specvalue):
  
  a = 0
  b = 7 
  p = 115792089237316195423570985008687907853269984665640564039457584007908834671663

  x0 = specvalue[0][0]
  y0 = specvalue[0][1]
  for i in range(1,len(specvalue)):
#	for j in range(len(matrix[i])):
    #print(specvalue[i][0],specvalue[i][1])
    x0,y0=get_np(x0,y0,specvalue[i][0],specvalue[i][1],a,p)
    
  return x0,y0
  
  #specsum = 0
 # for i in range (0,lenspeclen):
  #  specsum = specvalue[i] + specsum
 # return specsum
  
  
def pushbase64array(encodeds):
  #Message asciivalue dictory
  dictory ={1: (55066263022277343669578718895168534326250603453777594175500187360389116729240, 32670510020758816978083085130507043184471273380659243275938904335757337482424), 2: (89565891926547004231252920425935692360644145829622209833684329913297188986597, 12158399299693830322967808612713398636155367887041628176798871954788371653930), 3: (112711660439710606056748659173929673102114977341539408544630613555209775888121, 25583027980570883691656905877401976406448868254816295069919888960541586679410), 4: (103388573995635080359749164254216598308788835304023601477803095234286494993683, 37057141145242123013015316630864329550140216928701153669873286428255828810018), 5: (21505829891763648114329055987619236494102133314575206970830385799158076338148, 98003708678762621233683240503080860129026887322874138805529884920309963580118), 6: (115780575977492633039504758427830329241728645270042306223540962614150928364886, 78735063515800386211891312544505775871260717697865196436804966483607426560663), 7: (41948375291644419605210209193538855353224492619856392092318293986323063962044, 48361766907851246668144012348516735800090617714386977531302791340517493990618), 8: (21262057306151627953595685090280431278183829487175876377991189246716355947009, 41749993296225487051377864631615517161996906063147759678534462689479575333124), 9: (78173298682877769088723994436027545680738210601369041078747105985693655485630, 92362876758821804597230797234617159328445543067760556585160674174871431781431), 10: (72488970228380509287422715226575535698893157273063074627791787432852706183111, 62070622898698443831883535403436258712770888294397026493185421712108624767191), 11: (53957576663012291606402345341061437133522758407718089353314528343643821967563, 98386217607324929854432842186271083758341411730506808463586570492533445740059), 12: (94111259592240215275188773285036844871058226277992966241101117022315524122714, 76870767327212528811304566602812752860184934880685532702451763239157141742375), 13: (109699032664856045668214896063362497021339186688470416858630178803463338613416, 4835088675770141268294878046681321747490758260515711581034896622314066275713), 14: (33301309993451753050311554695703528430361259803437469669590207169100761277412, 91711666877231500617203373035680263572492971120307578300405368749466283229019), 15: (97505755694356382817881959832717013755620551362654128955029190924747025549326, 39856815248295663243990443767776362321337592747889787217974905533720651000664), 16: (104059883622109321374094289636044428849728529177856482232626205340719788190730, 112122903140080327253741791678230372394936108416576609264408917599318947489825), 17: (100862081773581120499222301212791081193994281440454033593790618293887747050036, 29883864782608871580821802176208615141762369223249393426421538275393411672951), 18: (38901272619685732968285380035171577070479117282397203902622597987558769928140, 87393127487643849618870152207476122589010570440825041333620493866032028851544), 19: (19588375357829479297593261744848590434972900972071148260168833594658324503404, 60568592333449737531184420002591396163903580402725242236305558432410218044282), 20: (34773495056115281091786765947597603724784643419904767525769502836017890139287, 8470533044743364938367028725608288731153024648869546164814808839694950063162), 21: (24049875635381557237058143631624836741422505207761609709712554171343558302165, 22669890352939653242079781319904043788036611953081321775127194249638113810828), 22: (29908081367423272746086114569421970207888665320998202915346633185016778189308, 19705544727792599099830884487151299095417296550955739824847212341657057716097), 23: (21545045623056848826483343441081830815719530893582365358444562918095175994431, 1296978981679745807043951140304019026881137717020402959957988455650813508967), 24: (115090238283566018960826468250608273126387416636633736439689841211757211870926, 47185183227829754668635270747409548752084785367264057948864458978444304762303), 25: (66165162229742397718677620062386824252848999675912518712054484685772795754260, 52018513869565587577673992057861898728543589604141463438466108080111932355586), 26: (46375854666189782329411331467438732923135312366454677774518044107217916677258, 28872066516664221627799718496556756366588329842312456769228220433104069963108), 27: (99023490166718961467148584643029653267652245207820783364668071358307234645801, 75362751621984629832705305750958516370071248757681753180287377123479199292501), 28: (38862517885349586199469132990077977525522399615397327331631717567532241615208, 56796032415390392137148811074183321813766115156763923072036584114852967736264), 29: (88789495143442116025801984763830218317601484092281216301053684219001740388315, 14971629676138079947354454610178388572791590863859394042797260533911845233794), 30: (49378132684229722274313556995573891527709373183446262831552359577455015004672, 78123232289538034746933569305416412888858560602643272431489024958214987548923), 31: (48009403158434809478298710137233764200988036438868259456275038304221065242292, 101379581344212856035375194820281365028426536613141130008386086305632315345538), 32: (95440839670107969455973995843666399663662641812074432045896568980475242364517, 67400892360194400039319989411395972789004161889863182881857158544061243615929), 33: (10219441022991940610048493520113102240595005085840974180672104038719657072293, 84023467742492607926612431243360899514584580916128500081114886405247779677078), 34: (12619776604307790469550660645393525758448419897555601226868753617320214526993, 86272100689574882152938150858861318820088413186167100601966648021512258522745), 35: (43584328072464330665967763306297595761508151294385275883849271528835646125177, 1171731419844835688478928898148416329180259014376715189840427072871218252873), 36: (101419098787597942766661010883841213675986572091206578880178916574081925093625, 53748097764673089702489673031527129553025318704228137363806494938199580582828), 37: (44696466249196887777481833878429299174322536392992392205634510941844339159869, 58341336599715296255997469230977942456412351469447624645098110293822755987119), 38: (82592391416753704330480457266605199466589998476548643675167586509583694299127, 96352244311289141626709213538144106127822954871227876742730890119647945927428), 39: (58245954963044076335222193032419637688317373475605757277584156718458924469103, 12764036181290433088658499435961200322530176588733628912045896254235383420282), 40: (65977930378964483966842705159007630837451149704819265634327747226133817150731, 106574384264472205627876631445935175739834375489227447805380155393950263965849), 41: (55442706224332212356956949983947160877073898960448236395042968736464621521147, 5905242281663190858892708265754696019921609450612128937011632221309721495543), 42: (115136800820456833737994126771386015026287095034625623644186278108926690779567, 3479535755779840016334846590594739014278212596066547564422106861430200972724), 43: (96414945312501980282409358461754977502747357521062737878469375231739675541449, 108016644921439980219149763541432916357155273945921323318636524851968650287411), 44: (42072772011086351294328511389423850314698152445154323541536957340534349973349, 99133657745585934968186133288050721248258413615930917407282740640761199917928), 45: (2069755349039566255304036353648839232649715781170511813011535420394543798627, 53173698995439924366951845531266805314230463309822098990695656330917108292762), 46: (112485767891133126222498548010271946438760990210983300801299715976951536768791, 85739109496996784368776054024999276184984966609644199395125789597014054674947), 47: (54253141229701892740678441538472478126466317116121420289154985997987923385716, 67647191893224491627918802490479062705030965032432110320079555712709270724822), 48: (50111670963408569345385204828013406423962206186815367070190059614189255189955, 96344650049071302355595011727277439354119658646232861677212062449792674989672), 49: (109846273198995465046214558810696509369395695668678477567979041624391316796720, 101711840700253487202274292900077312932162220876743713596510869779955653950519), 50: (18752372355191540835222161239240920883340654532661984440989362140194381601434, 88478450163343634110113046083156231725329016889379853417393465962619872936244), 51: (31766568681566786811585556083273569704981103744700868374944839455567139361883, 42892316439533998508363691869839348703863091985464714880496520815537080971390), 52: (19511180689223863964676874168627421459323156917296991798297923962201555596949, 57367979562017697409196531308288663269903370049256107839675184520239291074509), 53: (109204401742901676102938274178210524270147101032576152349016621748734496666183, 93562928090829704595527535353598406140745506107437687143296992058804640357878), 54: (36122698064134239917117034944532638029925389202648589133547978226819319812203, 17027329777463400105144356958107372283640412543533161381521436991456009891579), 55: (91804187441772561664481510830917750223077921964002572402238128845622951625169, 91945440139593333380184788272080657792196709314822575974121657953469941695606), 56: (85443494863408502680908561006538876660936831179320971186834465657383528300823, 41574129741798670788318102088797945519763253166412892215513009393101328479924), 57: (17189284425153064836001861279656763224636129289551722165462018837400972173600, 29445779904272847763706160655321487704701247799275275841430067857695472241472), 58: (31361859868524256934340493392748324439250961207479738197811398391136366390587, 66949045302018276465653829790546454755295341269007016439257946146448951430658), 59: (53467956276192349861948221937171498503643177269204461230384245004177138836533, 4119214727602775607932521128681884153131966461396859633231677764244527094881), 60: (518559790775991926153431284348924991691752894319091408626305042091127390610, 7754554211713140270585379622151031431183921268920287121212618482407411327399), 61: (53058764004935428650100139287376587679652978405430403380587712871864611556376, 2918800479109537269737873642942211407706668016660669097675760428828773803651), 62: (7470696802146976875048795875680307511987987110754117830917946933599684326041, 35498370868222357101075189419100726924131867018781426271212491175192595798687), 63: (103082696326686084252692006348842617458364360484939043050040089399696685644264, 40612530833850030770560071666434436443194162318210174699750855405684277524469), 64: (86454928033100054822938644242727206101601557724291916072342392316125160730507, 41929975541376036990359335647717381527212342035893043668288666074313354583455), 65: (11045059572793568563399009827450521654436229950346969273826455203229685425899, 26950030226550877209429637342197821712469081306958210747276495411981785794699), 66: (3424845089359850216662036433701154320174571538574732765710185710213042263842, 50402943044099287338970517565438553175068884535895555750200109900004591912417), 67: (101143937713719082963090668683011527973146442333401502687785111310791413372479, 38862116509156141457510692564259449296113038651200971193676748814312797774871), 68: (51066658180107921513962315407412637295052131625923864803877804316114485295337, 33347816669304080943742680598459188657402202482318798658365673129240153230584), 69: (42908521165389054147656703915977693567694617347068492019141574585392160469315, 108411282694261654019124559002505901449633459510310773275932971604470807505000), 70: (86865106983614620555782830675279365848528790960271514243101794703912353027136, 107186483708804024343949399862843037919568693300460965445053323392260478671799), 71: (18558249036237948424307693058273877802345585340121675077454343655866234916794, 102925297616426326316829909679718431975894466554508612202063072243624669625978), 72: (76417524908279090471280141612151274819536228432327196024616750366929236333900, 28547740495103478414520291360192300769496233495473526474752559351111853416127), 73: (79261216420675310801454986871094078214179215048846508873397145435821838777157, 112870164830798121167268857427192869563479593708946619428596289634189538482630), 74: (17844299963945865753556978175977048283527667030971488871107009726265147492416, 92339455426497992527764828083353129240162541312856283586209097866972992126025), 75: (53566794082043239731631458522702919010529639281102255921088692156396552332442, 52600923530647757045878761903221944743155065681530260944723915263453709490582), 76: (67990777350807742601404023085488753338978132210207570380931332031538910989091, 85792528080009126161701413187313528408286619337671538805045464108358228475888), 77: (40644470064564665175584579054027955840271219296244836168773903573899753995838, 89198703056127888476103653459098745055229124294272713714806438613549071761262), 78: (20748939091719637471895272621629400096581453981910040513983032651039194532014, 107007136602518391288517914008460549905372181058811316095661346454061774229193), 79: (109111382237769790097646325753800985432696951592160583206768965440742916720568, 101869497968125946738442255681207126574780898195001593990841056036912564106045), 80: (105562457083132745572708143974180364633865373973280165462544121334166431725102, 25628918875802021943667012249582785274069049593485836199662819559539854993207), 81: (53974893190710647917392856271326699739646766314291179501052839205294496567852, 22123123627253076826349264475542573056506312214169115841604592410105799074722), 82: (102837171301428769333771264773335921346950557806327713809549280863721245858271, 15164023296287171181043853434909470869363674779362801745003407514667801193163), 83: (67192827200719728671013143999224641878827088629569520859649981708262221161753, 103384655191190246127885605668210506147248415550730308407050901448849831220606), 84: (61401677321786128624431159032263749752468788015947186556533285933672418059129, 65545782242346006913034221054137782170449115459338816031208854498684321262830), 85: (54903456146219450286355757115060875348400970025202805483700188422117596624811, 7257110762626116538834930806768650551131081767862086604424125342895754982455), 86: (33238836385049624224277173107813446262790356254484721792146647050258190102188, 68765426899485956695091900677198638765507724712483592192815717200004462122786), 87: (24007976370911127292608057090268039794368741649196644859589589701956893165514, 108122176419818886633859099635006568033852272535729709179944422224910380249873), 88: (76298145411769127142051742143984516410310388698796900364544497222460493284606, 73411481198600422535897182689311125186386648944480927088108065877811504729128), 89: (95798783811477552110532139218095995588261607922943497599304995669953488256687, 62969615922034445131819050050848042428434876063790599311067024316063183397028), 90: (106424249689785792809434743491778818298150289868329582003793750155851559913753, 49930311026718593748365085023583718822918480166988780383065338740169345896747), 91: (10015981868058348984327315527227986149044397160813174099363811020333633533456, 47219187787383500334941697973860741060370165858155730325633999467122388338037), 92: (100465062236661070713292652798360405767974933403943197785038031859530698082328, 94188634306238076314961349736363811510818492108777651132739519725941790023149), 93: (52123589984427115055350294688910839421572550614785792489607179155035488918740, 110935648994881791085672996607117404349410644183587602534412205839211144014365), 94: (60099623364316816814360901080340830187927628082720539824424530667494328140530, 13168532797630625326505420165580249887582853122297745568490807466396307907166), 95: (9882445446243370679019973441389370914782298169440461435976781902375353582684, 96538225645603539151345674925865127760117360282144134748082597779357475014413), 96: (28521334929257642662355968364187618978461680651983966049366919313167261413603, 92001216339226101051709000074262638298012195154973025878101242482331580579919), 97: (73191618600684934363477573887062328895873581780579362909629019010919633615168, 107578895931616695567160590117601145860790445681836575682502992073140827825705), 98: (32260807620578486927060573094567194421889620277145625073289289981635159254452, 90489276162980686059013225219161110475382237731883191038134170438145132642754), 99: (102307057510119735131891022126563080960391958005135852855745919500808248060288, 4758751832773844050529323980822146180231708918603439844720489409288611158534), 100: (107303582290733097924842193972465022053148211775194373671539518313500194639752, 103795966108782717446806684023742168462365449272639790795591544606836007446638), 101: (22192605861032339923219300220952640740143957092649363892436849832160947841459, 46523550145918266838590957012521308010601656596758343153930544136769822884724), 102: (21841708194828928921666110851241958462886709384697305319615860361086400216190, 113487651941779314094220983893393587394651167102082064827741952919143428386628), 103: (23863015881719216153051207260816138099927482493539250656531368598936158919647, 4186147428965581719261549093321561779791482494625560151183589172097408281582), 104: (11083056710745658442716244053978689766248928868045541316920857988142616618716, 73295948688289636522856678705391718926042994078803433438999783280726367302604), 105: (109505498060993265589267516557028234335074575762343151902387717331321322442083, 34703259824710120586099512839167510148099278997938800873450731840992711239377), 106: (14373907026342837540790248859274986984173658260367602253381563663365555664677, 81785417689942388173318251866511952071411678624370309798925652125755161605821), 107: (97573163324582665367447127690214795536159248412174285990449644020553366942792, 113289505690612447053339725371588416733632595634688575080315168267493236300091), 108: (57171719647679641348870527589448445187713379178559972218492971811710413619742, 20384627872896850454765672663812599248828542672123482939352167575322079323145), 109: (22988641330376138291556463519387137775168751717144469933681756424377754723519, 43054880981465441319990816631611930439085360624934399797394257936366286280289), 110: (27014530906007957169531703425481274912103442539779119437726046076907210423569, 70052204206988426097199854494650803460514936258189950471015657998938191627469), 111: (52641354787079659835760017335606513692779259671592999628953750318451309889461, 64568943818380334826688611802596472118277221273089442952338325742929836584950), 112: (85266034062537391250069302603695295958363496297733629154359044325623246713660, 104008187123861977772044407350424193061842796463977286446819904307346548430832), 113: (107663894668589988416485732804907196067323549228812138412798187263568142054102, 64119329745161208050770810592499096484002065820040768955395483699057524509726), 114: (82912915632544328137725003247398238301133292886065754328746761508550033533621, 45428548577043322980129453651062737965397557139722875099846570462824032485896), 115: (10368879287274847063683326775245528892741533064032799844366072780982279055029, 42641425814606490851272551281672045263853946447473496814652144068027627890509), 116: (114152903724621333860948567490368962046201128763751000060784744139047430517897, 18179381626911943442892238595623401469111522068766957311520922177387435689861), 117: (106134458340345658891368879553264730672951336951557149795602277080076735987097, 111437454760900401415457100214588370191818201503160573158882948552237860521948), 118: (75877098474662534417929450349056078294512972958195098726037530636752650087936, 73465368254320768818737410323553632318291283168879707900928649380068364463054), 119: (3414570185207774988195907254638111010663682235814498718978778746795753512785, 110308138054162063872434202072244781559310362415331225986456498158446496177588), 120: (100123071679209893182588265588059937212528901448156035976966973357987233384486, 97120429522865428736604364081867499884484173130052754040658916206897719370828), 121: (33158942591319202694013880364699812464227945537966885412147324692873653802917, 29916548433595920274169576651554938867030867506507533063627691297992682067500), 122: (8867615028791025514053889708816324119300371263542482224594222618236029461047, 270978666408934671010140251149040886335834074615197330399395361317583393906), 123: (74901340345789065325870760596348306623878342739272826068162779513906431781301, 14607169553442007236852410049041684566594265431374316230317606814245957553771), 124: (112646285902968154960007259049732142913051411320680941933393840099389647122915, 46665699167462702249052103304923986648651527250540480428802282851073771668982), 125: (88697642802751524418503359630328367758668035510641882938485860024669701757335, 2235526159614022905352095433317649097888860456206003419057354640784531036435), 126: (49739765455947337879790908850139477504649012398313168454724745098982761739033, 71531864240966930926898922546635941869813841859894270770914769905489190838066), 127: (59757199831985803063258861155590945323274916778537213861841761251128847378561, 3265850877202437352564708587060002316627909249385655507505588671348225171796)}
  #print(dictory[127])
  
  ordarray = []
  lenstrencode = len(encodeds)
  #print(lenstrencode)
  for i in range(0,lenstrencode):
    left = ord(encodeds[i])
    x = dictory[left][0]
    y = dictory[left][1]
    ordarray.append([x,y])
  return ordarray
  
def finddictory(mmx,mmy):
  dictory ={(104059883622109321374094289636044428849728529177856482232626205340719788190730, 112122903140080327253741791678230372394936108416576609264408917599318947489825): 16, (21545045623056848826483343441081830815719530893582365358444562918095175994431, 1296978981679745807043951140304019026881137717020402959957988455650813508967): 23, (91804187441772561664481510830917750223077921964002572402238128845622951625169, 91945440139593333380184788272080657792196709314822575974121657953469941695606): 55, (57171719647679641348870527589448445187713379178559972218492971811710413619742, 20384627872896850454765672663812599248828542672123482939352167575322079323145): 108, (9882445446243370679019973441389370914782298169440461435976781902375353582684, 96538225645603539151345674925865127760117360282144134748082597779357475014413): 95, (58245954963044076335222193032419637688317373475605757277584156718458924469103, 12764036181290433088658499435961200322530176588733628912045896254235383420282): 39, (34773495056115281091786765947597603724784643419904767525769502836017890139287, 8470533044743364938367028725608288731153024648869546164814808839694950063162): 20, (40644470064564665175584579054027955840271219296244836168773903573899753995838, 89198703056127888476103653459098745055229124294272713714806438613549071761262): 77, (21841708194828928921666110851241958462886709384697305319615860361086400216190, 113487651941779314094220983893393587394651167102082064827741952919143428386628): 102, (24007976370911127292608057090268039794368741649196644859589589701956893165514, 108122176419818886633859099635006568033852272535729709179944422224910380249873): 87, (76298145411769127142051742143984516410310388698796900364544497222460493284606, 73411481198600422535897182689311125186386648944480927088108065877811504729128): 88, (23863015881719216153051207260816138099927482493539250656531368598936158919647, 4186147428965581719261549093321561779791482494625560151183589172097408281582): 103, (106134458340345658891368879553264730672951336951557149795602277080076735987097, 111437454760900401415457100214588370191818201503160573158882948552237860521948): 117, (29908081367423272746086114569421970207888665320998202915346633185016778189308, 19705544727792599099830884487151299095417296550955739824847212341657057716097): 22, (115090238283566018960826468250608273126387416636633736439689841211757211870926, 47185183227829754668635270747409548752084785367264057948864458978444304762303): 24, (18752372355191540835222161239240920883340654532661984440989362140194381601434, 88478450163343634110113046083156231725329016889379853417393465962619872936244): 50, (106424249689785792809434743491778818298150289868329582003793750155851559913753, 49930311026718593748365085023583718822918480166988780383065338740169345896747): 90, (18558249036237948424307693058273877802345585340121675077454343655866234916794, 102925297616426326316829909679718431975894466554508612202063072243624669625978): 71, (20748939091719637471895272621629400096581453981910040513983032651039194532014, 107007136602518391288517914008460549905372181058811316095661346454061774229193): 78, (3414570185207774988195907254638111010663682235814498718978778746795753512785, 110308138054162063872434202072244781559310362415331225986456498158446496177588): 119, (50111670963408569345385204828013406423962206186815367070190059614189255189955, 96344650049071302355595011727277439354119658646232861677212062449792674989672): 48, (101143937713719082963090668683011527973146442333401502687785111310791413372479, 38862116509156141457510692564259449296113038651200971193676748814312797774871): 67, (48009403158434809478298710137233764200988036438868259456275038304221065242292, 101379581344212856035375194820281365028426536613141130008386086305632315345538): 31, (67192827200719728671013143999224641878827088629569520859649981708262221161753, 103384655191190246127885605668210506147248415550730308407050901448849831220606): 83, (109204401742901676102938274178210524270147101032576152349016621748734496666183, 93562928090829704595527535353598406140745506107437687143296992058804640357878): 53, (27014530906007957169531703425481274912103442539779119437726046076907210423569, 70052204206988426097199854494650803460514936258189950471015657998938191627469): 110, (82592391416753704330480457266605199466589998476548643675167586509583694299127, 96352244311289141626709213538144106127822954871227876742730890119647945927428): 38, (51066658180107921513962315407412637295052131625923864803877804316114485295337, 33347816669304080943742680598459188657402202482318798658365673129240153230584): 68, (22192605861032339923219300220952640740143957092649363892436849832160947841459, 46523550145918266838590957012521308010601656596758343153930544136769822884724): 101, (22988641330376138291556463519387137775168751717144469933681756424377754723519, 43054880981465441319990816631611930439085360624934399797394257936366286280289): 109, (52641354787079659835760017335606513692779259671592999628953750318451309889461, 64568943818380334826688611802596472118277221273089442952338325742929836584950): 111, (24049875635381557237058143631624836741422505207761609709712554171343558302165, 22669890352939653242079781319904043788036611953081321775127194249638113810828): 21, (28521334929257642662355968364187618978461680651983966049366919313167261413603, 92001216339226101051709000074262638298012195154973025878101242482331580579919): 96, (67990777350807742601404023085488753338978132210207570380931332031538910989091, 85792528080009126161701413187313528408286619337671538805045464108358228475888): 76, (54253141229701892740678441538472478126466317116121420289154985997987923385716, 67647191893224491627918802490479062705030965032432110320079555712709270724822): 47, (107663894668589988416485732804907196067323549228812138412798187263568142054102, 64119329745161208050770810592499096484002065820040768955395483699057524509726): 113, (17189284425153064836001861279656763224636129289551722165462018837400972173600, 29445779904272847763706160655321487704701247799275275841430067857695472241472): 57, (115136800820456833737994126771386015026287095034625623644186278108926690779567, 3479535755779840016334846590594739014278212596066547564422106861430200972724): 42, (97573163324582665367447127690214795536159248412174285990449644020553366942792, 113289505690612447053339725371588416733632595634688575080315168267493236300091): 107, (109699032664856045668214896063362497021339186688470416858630178803463338613416, 4835088675770141268294878046681321747490758260515711581034896622314066275713): 13, (82912915632544328137725003247398238301133292886065754328746761508550033533621, 45428548577043322980129453651062737965397557139722875099846570462824032485896): 114, (89565891926547004231252920425935692360644145829622209833684329913297188986597, 12158399299693830322967808612713398636155367887041628176798871954788371653930): 2, (43584328072464330665967763306297595761508151294385275883849271528835646125177, 1171731419844835688478928898148416329180259014376715189840427072871218252873): 35, (21262057306151627953595685090280431278183829487175876377991189246716355947009, 41749993296225487051377864631615517161996906063147759678534462689479575333124): 8, (107303582290733097924842193972465022053148211775194373671539518313500194639752, 103795966108782717446806684023742168462365449272639790795591544606836007446638): 100, (74901340345789065325870760596348306623878342739272826068162779513906431781301, 14607169553442007236852410049041684566594265431374316230317606814245957553771): 123, (7470696802146976875048795875680307511987987110754117830917946933599684326041, 35498370868222357101075189419100726924131867018781426271212491175192595798687): 62, (86865106983614620555782830675279365848528790960271514243101794703912353027136, 107186483708804024343949399862843037919568693300460965445053323392260478671799): 70, (75877098474662534417929450349056078294512972958195098726037530636752650087936, 73465368254320768818737410323553632318291283168879707900928649380068364463054): 118, (95798783811477552110532139218095995588261607922943497599304995669953488256687, 62969615922034445131819050050848042428434876063790599311067024316063183397028): 89, (31361859868524256934340493392748324439250961207479738197811398391136366390587, 66949045302018276465653829790546454755295341269007016439257946146448951430658): 58, (53566794082043239731631458522702919010529639281102255921088692156396552332442, 52600923530647757045878761903221944743155065681530260944723915263453709490582): 75, (3424845089359850216662036433701154320174571538574732765710185710213042263842, 50402943044099287338970517565438553175068884535895555750200109900004591912417): 66, (112711660439710606056748659173929673102114977341539408544630613555209775888121, 25583027980570883691656905877401976406448868254816295069919888960541586679410): 3, (109111382237769790097646325753800985432696951592160583206768965440742916720568, 101869497968125946738442255681207126574780898195001593990841056036912564106045): 79, (76417524908279090471280141612151274819536228432327196024616750366929236333900, 28547740495103478414520291360192300769496233495473526474752559351111853416127): 72, (33301309993451753050311554695703528430361259803437469669590207169100761277412, 91711666877231500617203373035680263572492971120307578300405368749466283229019): 14, (72488970228380509287422715226575535698893157273063074627791787432852706183111, 62070622898698443831883535403436258712770888294397026493185421712108624767191): 10, (66165162229742397718677620062386824252848999675912518712054484685772795754260, 52018513869565587577673992057861898728543589604141463438466108080111932355586): 25, (19511180689223863964676874168627421459323156917296991798297923962201555596949, 57367979562017697409196531308288663269903370049256107839675184520239291074509): 52, (115780575977492633039504758427830329241728645270042306223540962614150928364886, 78735063515800386211891312544505775871260717697865196436804966483607426560663): 6, (112646285902968154960007259049732142913051411320680941933393840099389647122915, 46665699167462702249052103304923986648651527250540480428802282851073771668982): 124, (33158942591319202694013880364699812464227945537966885412147324692873653802917, 29916548433595920274169576651554938867030867506507533063627691297992682067500): 121, (38862517885349586199469132990077977525522399615397327331631717567532241615208, 56796032415390392137148811074183321813766115156763923072036584114852967736264): 28, (78173298682877769088723994436027545680738210601369041078747105985693655485630, 92362876758821804597230797234617159328445543067760556585160674174871431781431): 9, (14373907026342837540790248859274986984173658260367602253381563663365555664677, 81785417689942388173318251866511952071411678624370309798925652125755161605821): 106, (96414945312501980282409358461754977502747357521062737878469375231739675541449, 108016644921439980219149763541432916357155273945921323318636524851968650287411): 43, (32260807620578486927060573094567194421889620277145625073289289981635159254452, 90489276162980686059013225219161110475382237731883191038134170438145132642754): 98, (46375854666189782329411331467438732923135312366454677774518044107217916677258, 28872066516664221627799718496556756366588329842312456769228220433104069963108): 26, (10015981868058348984327315527227986149044397160813174099363811020333633533456, 47219187787383500334941697973860741060370165858155730325633999467122388338037): 91, (44696466249196887777481833878429299174322536392992392205634510941844339159869, 58341336599715296255997469230977942456412351469447624645098110293822755987119): 37, (31766568681566786811585556083273569704981103744700868374944839455567139361883, 42892316439533998508363691869839348703863091985464714880496520815537080971390): 51, (99023490166718961467148584643029653267652245207820783364668071358307234645801, 75362751621984629832705305750958516370071248757681753180287377123479199292501): 27, (79261216420675310801454986871094078214179215048846508873397145435821838777157, 112870164830798121167268857427192869563479593708946619428596289634189538482630): 73, (53467956276192349861948221937171498503643177269204461230384245004177138836533, 4119214727602775607932521128681884153131966461396859633231677764244527094881): 59, (49739765455947337879790908850139477504649012398313168454724745098982761739033, 71531864240966930926898922546635941869813841859894270770914769905489190838066): 126, (33238836385049624224277173107813446262790356254484721792146647050258190102188, 68765426899485956695091900677198638765507724712483592192815717200004462122786): 86, (88697642802751524418503359630328367758668035510641882938485860024669701757335, 2235526159614022905352095433317649097888860456206003419057354640784531036435): 125, (8867615028791025514053889708816324119300371263542482224594222618236029461047, 270978666408934671010140251149040886335834074615197330399395361317583393906): 122, (73191618600684934363477573887062328895873581780579362909629019010919633615168, 107578895931616695567160590117601145860790445681836575682502992073140827825705): 97, (105562457083132745572708143974180364633865373973280165462544121334166431725102, 25628918875802021943667012249582785274069049593485836199662819559539854993207): 80, (42908521165389054147656703915977693567694617347068492019141574585392160469315, 108411282694261654019124559002505901449633459510310773275932971604470807505000): 69, (109505498060993265589267516557028234335074575762343151902387717331321322442083, 34703259824710120586099512839167510148099278997938800873450731840992711239377): 105, (65977930378964483966842705159007630837451149704819265634327747226133817150731, 106574384264472205627876631445935175739834375489227447805380155393950263965849): 40, (88789495143442116025801984763830218317601484092281216301053684219001740388315, 14971629676138079947354454610178388572791590863859394042797260533911845233794): 29, (97505755694356382817881959832717013755620551362654128955029190924747025549326, 39856815248295663243990443767776362321337592747889787217974905533720651000664): 15, (518559790775991926153431284348924991691752894319091408626305042091127390610, 7754554211713140270585379622151031431183921268920287121212618482407411327399): 60, (55442706224332212356956949983947160877073898960448236395042968736464621521147, 5905242281663190858892708265754696019921609450612128937011632221309721495543): 41, (86454928033100054822938644242727206101601557724291916072342392316125160730507, 41929975541376036990359335647717381527212342035893043668288666074313354583455): 64, (10219441022991940610048493520113102240595005085840974180672104038719657072293, 84023467742492607926612431243360899514584580916128500081114886405247779677078): 33, (36122698064134239917117034944532638029925389202648589133547978226819319812203, 17027329777463400105144356958107372283640412543533161381521436991456009891579): 54, (54903456146219450286355757115060875348400970025202805483700188422117596624811, 7257110762626116538834930806768650551131081767862086604424125342895754982455): 85, (94111259592240215275188773285036844871058226277992966241101117022315524122714, 76870767327212528811304566602812752860184934880685532702451763239157141742375): 12, (2069755349039566255304036353648839232649715781170511813011535420394543798627, 53173698995439924366951845531266805314230463309822098990695656330917108292762): 45, (59757199831985803063258861155590945323274916778537213861841761251128847378561, 3265850877202437352564708587060002316627909249385655507505588671348225171796): 127, (102837171301428769333771264773335921346950557806327713809549280863721245858271, 15164023296287171181043853434909470869363674779362801745003407514667801193163): 82, (95440839670107969455973995843666399663662641812074432045896568980475242364517, 67400892360194400039319989411395972789004161889863182881857158544061243615929): 32, (52123589984427115055350294688910839421572550614785792489607179155035488918740, 110935648994881791085672996607117404349410644183587602534412205839211144014365): 93, (85266034062537391250069302603695295958363496297733629154359044325623246713660, 104008187123861977772044407350424193061842796463977286446819904307346548430832): 112, (109846273198995465046214558810696509369395695668678477567979041624391316796720, 101711840700253487202274292900077312932162220876743713596510869779955653950519): 49, (100862081773581120499222301212791081193994281440454033593790618293887747050036, 29883864782608871580821802176208615141762369223249393426421538275393411672951): 17, (103082696326686084252692006348842617458364360484939043050040089399696685644264, 40612530833850030770560071666434436443194162318210174699750855405684277524469): 63, (102307057510119735131891022126563080960391958005135852855745919500808248060288, 4758751832773844050529323980822146180231708918603439844720489409288611158534): 99, (53058764004935428650100139287376587679652978405430403380587712871864611556376, 2918800479109537269737873642942211407706668016660669097675760428828773803651): 61, (11083056710745658442716244053978689766248928868045541316920857988142616618716, 73295948688289636522856678705391718926042994078803433438999783280726367302604): 104, (53957576663012291606402345341061437133522758407718089353314528343643821967563, 98386217607324929854432842186271083758341411730506808463586570492533445740059): 11, (17844299963945865753556978175977048283527667030971488871107009726265147492416, 92339455426497992527764828083353129240162541312856283586209097866972992126025): 74, (38901272619685732968285380035171577070479117282397203902622597987558769928140, 87393127487643849618870152207476122589010570440825041333620493866032028851544): 18, (60099623364316816814360901080340830187927628082720539824424530667494328140530, 13168532797630625326505420165580249887582853122297745568490807466396307907166): 94, (114152903724621333860948567490368962046201128763751000060784744139047430517897, 18179381626911943442892238595623401469111522068766957311520922177387435689861): 116, (100465062236661070713292652798360405767974933403943197785038031859530698082328, 94188634306238076314961349736363811510818492108777651132739519725941790023149): 92, (21505829891763648114329055987619236494102133314575206970830385799158076338148, 98003708678762621233683240503080860129026887322874138805529884920309963580118): 5, (10368879287274847063683326775245528892741533064032799844366072780982279055029, 42641425814606490851272551281672045263853946447473496814652144068027627890509): 115, (41948375291644419605210209193538855353224492619856392092318293986323063962044, 48361766907851246668144012348516735800090617714386977531302791340517493990618): 7, (61401677321786128624431159032263749752468788015947186556533285933672418059129, 65545782242346006913034221054137782170449115459338816031208854498684321262830): 84, (42072772011086351294328511389423850314698152445154323541536957340534349973349, 99133657745585934968186133288050721248258413615930917407282740640761199917928): 44, (112485767891133126222498548010271946438760990210983300801299715976951536768791, 85739109496996784368776054024999276184984966609644199395125789597014054674947): 46, (100123071679209893182588265588059937212528901448156035976966973357987233384486, 97120429522865428736604364081867499884484173130052754040658916206897719370828): 120, (49378132684229722274313556995573891527709373183446262831552359577455015004672, 78123232289538034746933569305416412888858560602643272431489024958214987548923): 30, (11045059572793568563399009827450521654436229950346969273826455203229685425899, 26950030226550877209429637342197821712469081306958210747276495411981785794699): 65, (101419098787597942766661010883841213675986572091206578880178916574081925093625, 53748097764673089702489673031527129553025318704228137363806494938199580582828): 36, (85443494863408502680908561006538876660936831179320971186834465657383528300823, 41574129741798670788318102088797945519763253166412892215513009393101328479924): 56, (12619776604307790469550660645393525758448419897555601226868753617320214526993, 86272100689574882152938150858861318820088413186167100601966648021512258522745): 34, (53974893190710647917392856271326699739646766314291179501052839205294496567852, 22123123627253076826349264475542573056506312214169115841604592410105799074722): 81, (19588375357829479297593261744848590434972900972071148260168833594658324503404, 60568592333449737531184420002591396163903580402725242236305558432410218044282): 19, (55066263022277343669578718895168534326250603453777594175500187360389116729240, 32670510020758816978083085130507043184471273380659243275938904335757337482424): 1, (103388573995635080359749164254216598308788835304023601477803095234286494993683, 37057141145242123013015316630864329550140216928701153669873286428255828810018): 4}
  reslut = dictory.get((mmx, mmy))
  if reslut:
    #print(reslut)
    return reslut
  else:
    print("#fail decryption")
    exit()



def modular_sqrt(a, p):

    def legendre_symbol(a, p):
        """
            Compute the Legendre symbol a|p using
            Euler's criterion. p is a prime, a is
            relatively prime to p (if p divides
            a, then a|p = 0)

            Returns 1 if a has a square root modulo
            p, -1 otherwise.
        """
        ls = pow(a, (p - 1) // 2, p)
        return -1 if ls == p - 1 else ls

    """ Find a quadratic residue (mod p) of 'a'. p
        must be an odd prime.

        Solve the congruence of the form:
            x^2 = a (mod p)
        And returns x. Note that p - x is also a root.

        0 is returned is no square root exists for
        these a and p.

        The Tonelli-Shanks algorithm is used (except
        for some simple cases in which the solution
        is known from an identity). This algorithm
        runs in polynomial time (unless the
        generalized Riemann hypothesis is false).
    """
    # Simple cases
    #
    if legendre_symbol(a, p) != 1:
        return 0
    elif a == 0:
        return 0
    elif p == 2:
        return p
    elif p % 4 == 3:
        return pow(a, (p + 1) // 4, p)

    # Partition p-1 to s * 2^e for an odd s (i.e.
    # reduce all the powers of 2 from p-1)
    #
    s = p - 1
    e = 0
    while s % 2 == 0:
        s //= 2
        e += 1

    # Find some 'n' with a legendre symbol n|p = -1.
    # Shouldn't take long.
    #
    n = 2
    while legendre_symbol(n, p) != -1:
        n += 1

    # Here be dragons!
    # Read the paper "Square roots from 1; 24, 51,
    # 10 to Dan Shanks" by Ezra Brown for more
    # information
    #

    # x is a guess of the square root that gets better
    # with each iteration.
    # b is the "fudge factor" - by how much we're off
    # with the guess. The invariant x^2 = ab (mod p)
    # is maintained throughout the loop.
    # g is used for successive powers of n to update
    # both a and b
    # r is the exponent - decreases with each update
    #
    x = pow(a, (s + 1) // 2, p)
    b = pow(a, s, p)
    g = pow(n, s, p)
    r = e

    while True:
        t = b
        m = 0
        for m in range(r):
            if t == 1:
                break
            t = pow(t, 2, p)

        if m == 0:
            return x

        gs = pow(g, 2 ** (r - m - 1), p)
        g = (gs * gs) % p
        x = (x * gs) % p
        b = (b * g) % p
        r = m




def get_uncompressed_key(compressed_key):
    Pcurve =115792089237316195423570985008687907853269984665640564039457584007908834671663
    #2**256 - 2**32 - 2**9 - 2**8 - 2**7 - 2**6 - 2**4 -1
   # print("****")
    #print(int(compressed_key[:2]))
    y_parity = int(compressed_key[:2]) - 2
   # print(y_parity)

   # print("****")
 #   print("#####")

    x = int(compressed_key[2:], 16)
  #  print(x)
   # print("#####")


    a = (pow(x, 3, Pcurve) + 7) % Pcurve

 #   print(modular_sqrt(a, Pcurve)) # should return 6
    sub_p =  modular_sqrt(a, Pcurve) # should return 6
    #print(sub_p)
    #y = pow_mod(a, (Pcurve+1)//4, Pcurve)

    if sub_p % 2 != y_parity:
       # print("88")
        sub_p = -sub_p % Pcurve

    uncompressed_key = '04'+str(compressed_key[2:]) +str(hex(sub_p)[2:])
    #print(uncompressed_key)

    return x,sub_p







def hash_string(string):
  return hashlib.sha256(string.encode('utf-8')).hexdigest()

def ripemd_string(string):
  hash_256_value = string
  obj = hashlib.new('ripemd160', hash_256_value.encode('utf-8'))
  ripemd_160_value = obj.hexdigest()
  return ripemd_160_value
  
  
  
def encryption_file(tfile,pubfile,finallyfile):
  
  a = 0
  b = 7 
  p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
 
  
  G_x = 55066263022277343669578718895168534326250603453777594175500187360389116729240
  G_y = 32670510020758816978083085130507043184471273380659243275938904335757337482424
  n =115792089237316195423570985008687907852837564279074904382605163141518161494337
  #获取椭圆曲线的阶
  #n=6
  
  with open(tfile,'r') as f:
    str_encrypt = "\n".join([l.rstrip() for l in f])

  encoded = base64.b64encode(str_encrypt.encode('utf-8'))
  encodeds = str(encoded,encoding= 'utf-8')
  
  base64array = pushbase64array(encodeds)
  #print(base64array)
  
  with open(pubfile,'r') as qtt:
    pubkey=json.load(qtt)
 # pubx= pubkey[0][0]
 # puby= pubkey[0][1]
  
  
  pubx,puby = get_uncompressed_key(pubkey[0][0])
  
  KEY_x0,KEY_y0= pubx,puby
  
  r =9
  pa2 = pusharry(r)
  specvalue2 = specarrayelliptailPub(pa2,KEY_x0,KEY_y0)
  KEY_x2,KEY_y2= checksameelliptail(specvalue2)
  
  arrayc1 = []
  for i in range(0,len(base64array)):
    mx,my= base64array[i][0],base64array[i][1]
    c1x,c1y = addtwo(mx,my,KEY_x2,KEY_y2)
    #arrayc1.append([c1x,c1y])
    arrayc1_Compressed = '0' + str(2 + c1y % 2) + str(hex(c1x)[2:])
    arrayc1.append([arrayc1_Compressed])
  
    
    
    
  specvalue3=specarrayelliptail(pa2)
  c2x,c2y = checksameelliptail(specvalue3)
  c2list = []
  #c2list.append([c2x,c2y])
  
  c2list_Compressed = '0' + str(2 + c2y % 2) + str(hex(c2x)[2:])
  c2list.append([c2list_Compressed])
  
  
  finallay_list= [arrayc1,c2list]
#  with open(c1file,'w') as q:
    #json.dump(arrayc1,q)
    
    
#   with open(c2file,'w') as q:
    
   # json.dump(finallay_list,q)
    
  with open(finallyfile,'w') as q:
    json.dump(finallay_list,q)
  
def decryption_file(key,finallyfile,decrypt_file):

  a = 0
  b = 7 
  p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
 
  
  G_x = 55066263022277343669578718895168534326250603453777594175500187360389116729240
  G_y = 32670510020758816978083085130507043184471273380659243275938904335757337482424
  n =115792089237316195423570985008687907852837564279074904382605163141518161494337
  #获取椭圆曲线的阶
  #n=6
  
  pa0=pusharry(key)
  with open(finallyfile,'r') as q:
    c1andc2 = json.load(q)
  
  
  c2x,c2y = get_uncompressed_key(c1andc2[1][0][0])
  
  encryptionlist=c1andc2[0]
  #encryptionlistc2=c1andc2[1]
    
  specvalue4=  specarrayelliptailPub(pa0,c2x,c2y)
  kc2x,kc2y= checksameelliptail(specvalue4)
  
  minuskc2x = kc2x
  minuskc2y = (-1*kc2y)%p
  
  #fdkeyarray = []
  fdresult = ''
  for i in range (0,len(encryptionlist)):
    c1xx,c1yy = get_uncompressed_key(encryptionlist[i][0])
  
    #c1xx,c1yy= encryptionlist[i][0],encryptionlist[i][1]
    mmx ,mmy = addtwo(c1xx,c1yy,minuskc2x,minuskc2y)
    
    fdkey= finddictory(mmx ,mmy)
    fdresult= fdresult + chr(fdkey)
    
  tdata  = fdresult
  tobd= tdata.encode('utf-8')
  
  data = base64.b64decode(tobd)
  data = str(data, encoding='utf-8')
  #print(data)
  with open(decrypt_file,"w") as q:
    q.write(data)
  
  
  
def ecc_main():
  
  parser = argparse.ArgumentParser(description="ecc asymmetric encryption algorithm")
  parser.add_argument("-g","--generate" ,help = "generate pubkey",default=0,type = int)
  parser.add_argument("-p","--passwd" ,help = "passwd",default="0123456789")
  parser.add_argument("-o","--output" ,help = "output pubkey file",default="createpub.txt")
  parser.add_argument("-m","--mode" ,help = "encryption and decryption",default="e")

  modes = parser.parse_args()
  
  gkey = modes.generate
  mode = modes.mode
  
  
  
  a = 0
  b = 7 
  p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
      
  
  G_x = 55066263022277343669578718895168534326250603453777594175500187360389116729240
  G_y = 32670510020758816978083085130507043184471273380659243275938904335757337482424
  n =115792089237316195423570985008687907852837564279074904382605163141518161494337
  #获取椭圆曲线的阶
  #n=6
  
  tfile="tfile.txt"  
  pubfile ="pubfile.txt"
  #c1file="c1file.txt"
 # c2file="c2file.txt"
  finallyfile= "finallyfile.txt"
  directory = './'
  file_list=[]
  dir_file="dir_file.txt"
  flie_dictionary={}
  
  if(mode == "e"):
    whether_file =  os.path.isfile(dir_file)
    if whether_file:
      with open(dir_file,'r') as q:
        flie_dictionary=json.load(q)
      
    else:
      for root, dirs, files in os.walk(directory):
        for filename in files:
      	  if(filename!="Ecc.py" and filename!="dir_file.txt" and filename!="pubfile.txt"):
      	    flie_dictionary.update({filename:"d"})
      #print(file_list) 

    print("-------------------------")
    num =0
    for k,v in flie_dictionary.items():
    #for i in range(len(files_list)):
      if (v=="d"):
        print(f"[{num}] {k}")  
        file_list.append(k)
        num = num + 1
    print("[999] encryption all files") 
    print("-------------------------")  
  
    choice = int(input("what's your choice ? \n"))
    
    if(choice != 999):
      #pass
      encryption_file(file_list[choice],pubfile,file_list[choice])
      flie_dictionary.update({file_list[choice]:"e"})
 
    else:
      for k,v in flie_dictionary.items():
    #for i in range(len(files_list)):
        if (v=="d"):
          encryption_file(k,pubfile,k)
          print(f"{k} encryption success.")
          flie_dictionary.update({k:"e"})
   
    with open(dir_file,'w') as q:
      json.dump(flie_dictionary,q)
        
  elif(mode == "d"):
    #key =int(input("请输入私钥:"))
    keyt = input("please input password,less than 20.\n")
    key = int(hash_string(keyt),16)%p

    with open(dir_file,'r') as q:
      flie_dictionary=json.load(q)
    print("-------------------------")
    num =0
    for k,v in flie_dictionary.items():
    #for i in range(len(files_list)):
      if (v=="e"):
        print(f"[{num}] {k}")  
        file_list.append(k)
        num = num + 1
    print("[999] decryption all files") 
    print("-------------------------") 
    choice = int(input("what's your choice ? \n"))
    if(choice != 999):
      #pass
      decryption_file(key,file_list[choice],file_list[choice])
      flie_dictionary.update({file_list[choice]:"d"})
      with open(dir_file,'w') as q:
        json.dump(flie_dictionary,q)  
    else:
      for k,v in flie_dictionary.items():
      #for i in range(len(files_list)):
        if (v=="e"):
          print(f"{k} decryption success")
          decryption_file(key,k,k)
          flie_dictionary.update({k:"d"})
      with open(dir_file,'w') as q:
        json.dump(flie_dictionary,q)   
  
  elif(mode== 'g'):
    keyt = input("please input password,less than 20.\n")
    gkey = int(hash_string(keyt),16)%p

    #keyt = int(input("user1：请输入私钥小key（<{}）：".format(n)))
    #gkey= keyt
    check = 115792089237316195423570985008687907852837564279074904382605163141518161494336
    if (gkey>check):
      exit()
    
    pat = pusharry(gkey)
    specvaluet = specarrayelliptail(pat)
    KEY_xt,kEY_yt = checksameelliptail(specvaluet)
    pub = []
    #
    pub_x = KEY_xt
    pub_y = kEY_yt
    pubKeyCompressed = '0' + str(2 + pub_y % 2) + str(hex(pub_x)[2:])
    pub.append([pubKeyCompressed])
    with open(pubfile,'w') as qtt:
      #qtt.write([KEY_xt,kEY_yt])
      json.dump(pub,qtt)

  elif(mode== 't'):
    pass
if __name__=="__main__":
  
  
  ecc_main()


